*** Loops in C and C++ ***

Loops in programming come into use when we need to repeatedly execute a block of statements

There are mainly two types of loops:

1.Entry Controlled loops:
  In this type of loops the test condition is tested before entering the loop body.
  For Loop and While Loop are entry controlled loops.

2.Exit Controlled Loops: 
  In this type of loops the test condition is tested or evaluated at the end of loop body.
  Therefore, the loop body will execute atleast once, irrespective of whether the test condition is true or false. 
  do – while loop is exit controlled loop.

                 **********    for Loop    ************

A for loop is a repetition control structure which allows us to write a loop that is executed a specific number of times. The loop enables us to perform n number of steps together in one line.
Syntax:

for (initialization expr; test expr; update expr)
{    
     // body of the loop
     // statements we want to execute
}
In for loop, a loop variable is used to control the loop. First initialize this loop variable to some value, then check whether this variable is less than or greater than counter value. 
If statement is true, then loop body is executed and loop variable gets updated . Steps are repeated till exit condition comes.

#Initialization Expression: 
In this expression we have to initialize the loop counter to some value. for example: int i=1;

#Test Expression: 
In this expression we have to test the condition. If the condition evaluates to true then we will execute the body of loop and go to update expression otherwise we will exit from the for loop. For example: i <= 10;

#Update Expression: 
After executing loop body this expression increments/decrements the loop variable by some value. for example: i++;



Example:





// C program to illustrate for loop
#include <stdio.h>
  
int main()
{
    int i=0;
      
    for (i = 1; i <= 10; i++)
    {
        printf( "Hello World\n");    
    }
  
    return 0;
}

Output:

Hello World
Hello World
Hello World
Hello World
Hello World
Hello World
Hello World
Hello World
Hello World
Hello World
 
                *******************      While Loop   **************

While studying for loop we have seen that the number of iterations is known beforehand, i.e. the number of times the loop body is needed to be executed is known to us. 
while loops are used in situations where we do not know the exact number of iterations of loop beforehand. 
The loop execution is terminated on the basis of test condition.

Syntax:
We have already stated that a loop is mainly consisted of three statements – initialization expression, test expression, update expression. 
The syntax of the three loops – For, while and do while mainly differs on the placement of these three statements.

initialization expression;
while (test_expression)
{
   // statements
 
  update_expression;
}



Example:


// C program to illustrate while loop
#include <stdio.h>
  
int main()
{
    // initialization expression
    int i = 1;
  
    // test expression
    while (i < 6)
    {
        printf( "Hello World\n");    
  
        // update expression
        i++;
    }
  
    return 0;
}

Output:

Hello World
Hello World
Hello World
Hello World
Hello World

                    ******************    do while loop   *****************

In do while loops also the loop execution is terminated on the basis of test condition. The main difference between do while loop and while loop is in do while loop the condition is tested at the end of loop body, i.e do while loop is exit controlled whereas the other two loops are entry controlled loops.
Note: In do while loop the loop body will execute at least once irrespective of test condition.




Syntax:

initialization expression;
do
{
   // statements

   update_expression;
} while (test_expression);
Note: Notice the semi – colon(“;”) in the end of loop.

Flow Diagram:


Example:


// C program to illustrate do-while loop
#include <stdio.h>
  
int main()
{
    int i = 2; // Initialization expression
  
    do
    {
        // loop body
        printf( "Hello World\n");    
  
        // update expression
        i++;
  
    }  while (i < 1);   // test expression
  
    return 0;
}

Output:
Hello World
In the above program the test condition (i<1) evaluates to false. But still as the loop is exit – controlled the loop body will execute once.

           *******************         What about an Infinite Loop?       ******************

An infinite loop (sometimes called an endless loop ) is a piece of coding that lacks a functional exit so that it repeats indefinitely. 
An infinite loop occurs when a condition always evaluates to true. Usually, this is an error.


// C program to demonstrate infinite loops
// using for and while
// Uncomment the  sections to see the output
  
#include <stdio.h>
  
int main ()
{
    int i;
  
    // This is an infinite for loop as the condition
    // expression is blank
    for ( ; ; )
    {
       printf("This loop will run forever.\n");
    }
  
    // This is an infinite for loop as the condition
    // given in while loop will keep repeating infinitely
    
    while (i != 0)
    {
        i-- ;
        printf( "This loop will run forever.\n");
    }
    */
  
    // This is an infinite for loop as the condition
    // given in while loop is "true"
    /*
    while (true)
    {
        printf( "This loop will run forever.\n");
    }
    
}

Output:
This loop will run forever.
This loop will run forever.
................... 
More Advanced Looping Techniques

Range-based for loop in C++
for_each loop in C++
Important Points:

Use for loop when number of iterations is known beforehand, i.e. the number of times the loop body is needed to be executed is known.
Use while loops where exact number of iterations is not known but the loop termination condition is known.
Use do while loop if the code needs to be executed at least once like in Menu driven programs

==================================================

*** Decision making in Cpp ***

Decision Making in C / C++ (if , if..else, Nested if, if-else)
There come situations in real life when we need to make some decisions and based on these decisions, we decide what should we do next. Similar situations arise in programming also where we need to make some decisions and based on these decisions we will execute the next block of code. For example, in C if x occurs then execute y else execute z. There can also be multiple conditions like in C if x occurs then execute p, else if condition y occurs execute q, else execute r. This condition of C else-if is one of the many ways of importing multiple conditions. 
 



Decision-making statements in programming languages decide the direction of the flow of program execution. Decision-making statements available in C or C++ are: 
 

if statement
if..else statements
nested if statements
if-else-if ladder
switch statements
Jump Statements: 
break
continue
goto
return
 

if statement in C/C++



if statement is the most simple decision-making statement. It is used to decide whether a certain statement or block of statements will be executed or not i.e if a certain condition is true then a block of statement is executed otherwise not. 
Syntax: 
 

if(condition) 
{
   // Statements to execute if
   // condition is true
}
Here, the condition after evaluation will be either true or false. C if statement accepts boolean values – if the value is true then it will execute the block of statements below it otherwise not. If we do not provide the curly braces ‘{‘ and ‘}’ after if(condition) then by default if statement will consider the first immediately below statement to be inside its block. 
Example: 
 

if(condition)
   statement1;
   statement2;

// Here if the condition is true, if block 
// will consider only statement1 to be inside 
// its block.
Flowchart 
 

if-statement-in-java

 


// C program to illustrate If statement
#include <stdio.h>
 
int main() {
    int i = 10;
 
    if (i > 15)
    {
       printf("10 is less than 15");
    }   
    
    printf("I am Not in if");
}
Output: 
I am Not in if
 

As the condition present in the if statement is false. So, the block below the if statement is not executed.
 

if-else in C/C++



The if statement alone tells us that if a condition is true it will execute a block of statements and if the condition is false it won’t. But what if we want to do something else if the condition is false. Here comes the C else statement. We can use the else statement with if statement to execute a block of code when the condition is false. 
Syntax: 
 

if (condition)
{
    // Executes this block if
    // condition is true
}
else
{
    // Executes this block if
    // condition is false
}
Flowchart: 
 

if-else-statement

Example:
 


// C program to illustrate If statement
#include <stdio.h>
 
int main() {
    int i = 20;
 
    if (i < 15){
       
        printf("i is smaller than 15");
    }
    else{
       
        printf("i is greater than 15");
    }       
    return 0;   
}
Output: 
i is greater than 15
 

The block of code following the else statement is executed as the condition present in the if statement is false.
 

nested-if in C/C++

A nested if in C is an if statement that is the target of another if statement. Nested if statements mean an if statement inside another if statement. Yes, both C and C++ allow us to nested if statements within if statements, i.e, we can place an if statement inside another if statement. 
Syntax: 
 

if (condition1) 
{
   // Executes when condition1 is true
   if (condition2) 
   {
      // Executes when condition2 is true
   }
}
Flowchart 
 

nested-if



Example: 
 


// C program to illustrate nested-if statement
#include <stdio.h>
 
int main() {
    int i = 10;
 
    if (i == 10)
    {
        // First if statement
        if (i < 15)
           printf("i is smaller than 15\n");
 
        // Nested - if statement
        // Will only be executed if statement above
        // is true
        if (i < 12)
            printf("i is smaller than 12 too\n");
        else
            printf("i is greater than 15");
    }
 
    return 0;
}
Output: 
i is smaller than 15
i is smaller than 12 too
 

if-else-if ladder in C/C++

Here, a user can decide among multiple options. The C if statements are executed from the top down. As soon as one of the conditions controlling the if is true, the statement associated with that if is executed, and the rest of the C else-if ladder is bypassed. If none of the conditions are true, then the final else statement will be executed. 
Syntax: 
 

if (condition)
    statement;
else if (condition)
    statement;
.
.
else
    statement;
 

if-else-if-ladder

Example: 
 


// C program to illustrate nested-if statement
#include <stdio.h>
 
int main() {
    int i = 20;
  
    if (i == 10)
        printf("i is 10");
    else if (i == 15)
        printf("i is 15");
    else if (i == 20)
        printf("i is 20");
    else
        printf("i is not present");
}
Output: 
i is 20
 

Jump Statements in C/C++

These statements are used in C orC++ for the unconditional flow of control throughout the functions in a program. They support four types of jump statements:
 



C break: This loop control statement is used to terminate the loop. As soon as the break statement is encountered from within a loop, the loop iterations stop there, and control returns from the loop immediately to the first statement after the loop. 
Syntax: 
 
break;
Basically, break statements are used in situations when we are not sure about the actual number of iterations for the loop or we want to terminate the loop based on some condition. 
 


Example: 
 

// C program to illustrate
// Linear Search
 
#include <stdio.h>
 
void findElement(int arr[], int size, int key)
{
    // loop to traverse array and search for key
    for (int i = 0; i < size; i++) {
        if (arr[i] == key) {
            printf("Element found at position: %d", (i + 1));
            break;
        }
    }
}
 
int main() {
    int arr[] = { 1, 2, 3, 4, 5, 6 };
     
    // no of elements
    int n = 6; 
     
    // key to be searched
    int key = 3;
 
    // Calling function to find the key
    findElement(arr, n, key);
 
    return 0;
}
 
Output: 
Element found at position: 3
 

 
C continues: This loop control statement is just like the break statement. The continue statement is opposite to that of the break statement, instead of terminating the loop, it forces to execute the next iteration of the loop. 
As the name suggests the continue statement forces the loop to continue or execute the next iteration. When the continue statement is executed in the loop, the code inside the loop following the continue statement will be skipped and the next iteration of the loop will begin. 
Syntax: 
 
continue;
 


Example: 
 

// C program to explain the use
// of continue statement
#include <stdio.h>
 
int main() {
    // loop from 1 to 10
    for (int i = 1; i <= 10; i++) {
 
        // If i is equals to 6,
        // continue to next iteration
        // without printing
        if (i == 6)
            continue;
 
        else
            // otherwise print the value of i
            printf("%d ", i);
    }
 
    return 0;
}
 
Output: 
1 2 3 4 5 7 8 9 10
 

 
If you create a variable in if-else in C/C++, it will be local to that if/else block only. You can use global variables inside the if/else block. If the name of the variable you created in if/else is as same as any global variable then priority will be given to `local variable`. 


#include<iostream>
using namespace std;
 
int main(){
    int gfg=0; // local variable for main
    cout<<"Before if-else block "<<gfg<<endl;
    if(1){
        int gfg = 100; // new local variable of if block
        cout<<"if block "<<gfg<<endl;
    }
    cout<<"After if block "<<gfg<<endl;
    return 0;
}
/*
    Before if-else block 0
    if block 100
    After if block 0
*/
C goto: The goto statement in C/C++ also referred to as unconditional jump statement can be used to jump from one point to another within a function. 
Syntax: 
 
Syntax1      |   Syntax2
----------------------------
goto label;  |    label:  
.            |    .
.            |    .
.            |    .
label:       |    goto label;
In the above syntax, the first line tells the compiler to go to or jump to the statement marked as a label. Here label is a user-defined identifier that indicates the target statement. The statement immediately followed after ‘label:’ is the destination statement. The ‘label:’ can also appear before the ‘goto label;’ statement in the above syntax. 
 
goto

Below are some examples of how to use goto statement:
Examples: 
 

// C program to print numbers
// from 1 to 10 using goto statement
#include <stdio.h>
 
// function to print numbers from 1 to 10
void printNumbers()
{
    int n = 1;
label:
    printf("%d ",n);
    n++;
    if (n <= 10)
        goto label;
}
 
// Driver program to test above function
int main() {
    printNumbers();
    return 0;
}
 
Output: 
1 2 3 4 5 6 7 8 9 10
 

 
C return: The return in C or C++ returns the flow of the execution to the function from where it is called. This statement does not mandatorily need any conditional statements. As soon as the statement is executed, the flow of the program stops immediately and return the control from where it was called. The return statement may or may not return anything for a void function, but for a non-void function, a return value is must be returned. 
Syntax: 
 
return[expression];
Example: 
 

// C code to illustrate return
// statement
#include <stdio.h>
 
// non-void return type
// function to calculate sum
int SUM(int a, int b)
{
    int s1 = a + b;
    return s1;
}
 
// returns void
// function to print
void Print(int s2)
{
    printf("The sum is %d", s2);
    return;
}
 
int main()
{
    int num1 = 10;
    int num2 = 10;
    int sum_of = SUM(num1, num2);
    Print(sum_of);
    return 0;
}
 
Output: 
The sum is 20

==================================================



